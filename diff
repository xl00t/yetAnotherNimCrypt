19a20,23
> from Crypto.Cipher import AES
> from Crypto.Util.Padding import pad, unpad
> 
> BLOCK_SIZE = 64
29c33
<         formated_shellcode += f"{ord(raw_shellcode[i])},"
---
>         formated_shellcode += f"{raw_shellcode[i]},"
52a57,60
>     
> def aes_shellcode(shellcode, key):
>     cipher = AES.new(key, AES.MODE_ECB)
>     return cipher.encrypt(pad(shellcode, BLOCK_SIZE))
80,81c88,91
<     except:
<         print("[-] Invalid Technique")
---
>     except Exception as e:
>         import traceback
>         print(traceback.format_exc())
>         print("[-] Invalid Technique", e)
91,92c101,102
<     key = random_key(32) if not arguments["--key"] else arguments["--key"]
<     encryption = "xor" if not arguments["--encryption"] else arguments["--encryption"]
---
>     key = random_key(32) if not arguments["--key"] else arguments["--key"].encode()
>     encryption = "xor" if not arguments["--encryption"] else arguments["--encryption"].lower()
94c104
<     sleep_time = str(20) if not arguments["--sleep_time"] else arguments["--sleep_time"]
---
>     sleep_time = str(5) if not arguments["--sleep_time"] else arguments["--sleep_time"]
105c115
<         key = random_key(len(shellcode))
---
>         key = random_key(len(shellcode) // 4)
115a126,131
> 
>         elif encryption == "aes":
>             shellcode = b"SALUT MEC"
>             shellcode_enc = aes_shellcode(shellcode, key)
>             write_encrypt_template(encryption, key)
>         
